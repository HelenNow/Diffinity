name: Push Diffinity to NuGet
run-name: Push Diffinity to NuGet

permissions:
  contents: write  # allows committing back to repo

on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

env:
  PROJECT_PATH: Diffinity/Diffinity.csproj
  PACKAGE_NAME: Diffinity

jobs:
  push_to_nuget:
    if: contains('["mbdeir","NHusseini1","NajatBdeir"]', github.actor)
    runs-on: windows-2025
    steps:
      # Checkout PR branch
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}

      # Setup .NET SDK
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      # Bump version in Diffinity.csproj
      - name: Bump version
        id: bump_version
        shell: pwsh
        run: |
          $currentVersion = (Get-Content -Path ${{ env.PROJECT_PATH }} -Raw) -match '<Version>(.*?)<\/Version>' | Out-Null; $matches[1]
          $parts = $matches[1].Split('.')
          $parts[2] = [int]$parts[2] + 1
          $newVersion = "$($parts[0]).$($parts[1]).$($parts[2])"

          (Get-Content ${{ env.PROJECT_PATH }}) -replace "<Version>.*?</Version>", "<Version>$newVersion</Version>" | Set-Content ${{ env.PROJECT_PATH }}

          echo "VERSION=$newVersion" >> $env:GITHUB_ENV
          echo "Using version $newVersion"

      # Commit updated version back to PR branch
      - name: Commit updated version
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          git add ${{ env.PROJECT_PATH }}
          git commit -m "chore: bump version to ${{ env.VERSION }}" || echo "No changes to commit"
          git push origin HEAD:${{ github.head_ref }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Restore dependencies
      - name: Restore dependencies
        run: dotnet restore ${{ env.PROJECT_PATH }}

      # Build project
      - name: Build
        run: dotnet build ${{ env.PROJECT_PATH }} --configuration Release

      # Pack NuGet package
      - name: Pack
        run: dotnet pack ${{ env.PROJECT_PATH }} --no-build --configuration Release -p:PackageVersion=${{ env.VERSION }} --output ./artifacts

      # Push to NuGet.org
      - name: Push to NuGet.org
        shell: pwsh
        run: |
          $pkg = Get-ChildItem -Path ./artifacts -Filter *.nupkg | Select-Object -First 1
          if ($pkg -eq $null) {
              throw "No .nupkg file found in ./artifacts!"
          }
          Write-Host "Pushing package: $($pkg.FullName)"
          dotnet nuget push $pkg.FullName `
            --api-key ${{ secrets.NUGET_API_KEY }} `
            --source https://api.nuget.org/v3/index.json
